{"majorversion": 2, "classmap": {"BitmapSequence": {"name": "BitmapSequence", "constructors": [{"params": [{"type": "SpriteSheet", "name": "spriteSheet", "description": " The SpriteSheet instance to play back. This includes the source image, frame \ndimensions, and frame data. See SpriteSheet for more information."}], "description": "Displays frames or sequences of frames from a sprite sheet image. A sprite sheet is a series of images \n(usually animation frames) combined into a single image on a regular grid. For example, an animation \nconsisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across by 2 high).\nYou can display individual frames, play sequential frames as an animation, and even sequence animations \ntogether. See the SpriteSheet class for more information on setting up frames and animation."}], "namespace": "", "module": "EaselJS", "guessedname": "BitmapSequence", "methods": {"draw": {"params": [{"type": "CanvasRenderingContext2D", "name": "ctx", "description": " The canvas 2D context object to draw into."}, {"type": "Boolean", "name": "ignoreCache", "description": " Indicates whether the draw operation should ignore any current cache. \nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself)."}], "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "draw", "guessedtype": "function"}, "cloneProps": {"protected": "", "params": [{"type": "Text", "name": "o", "description": ""}], "guessedname": "cloneProps", "guessedtype": "function"}, "uncache": {"description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance."}, "cache": {"description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance."}, "_goto": {"protected": "", "params": [{"type": "String|Number", "name": "frameOrSequence", "description": " The frame number of sequence that the playhead should move to."}], "description": "Moves the playhead to the specified frame number of sequence.", "guessedname": "_goto", "guessedtype": "function"}, "updateCache": {"description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance."}, "gotoAndPlay": {"params": [{"type": "String|Number", "name": "frameOrSequence", "description": " The frame number or sequence that the playhead should move to\nand begin playing."}], "description": "Sets paused to false and plays the specified sequence name, named frame, or frame number.", "guessedname": "gotoAndPlay", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}, "isVisible": {"return": {"type": "Boolean", "description": "Boolean indicating whether the display object would be visible if drawn to a canvas"}, "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "isVisible", "guessedtype": "function"}, "initialize": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "tick": {"description": "Advances the currentFrame if paused is not true. This is called automatically when the Stage ticks.", "guessedname": "tick", "guessedtype": "function"}, "clone": {"return": {"type": "Point", "description": "a clone of the Point instance."}, "description": "Returns a clone of the Point instance.", "guessedname": "clone", "guessedtype": "function"}, "gotoAndStop": {"params": [{"type": "String|Number", "name": "frameOrSequence", "description": " The frame number or sequence that the playhead should move to\nand stop."}], "description": "Sets paused to true and seeks to the specified sequence name, named frame, or frame number.", "guessedname": "gotoAndStop", "guessedtype": "function"}}, "extends": "DisplayObject", "superclass": "DisplayObject", "file": "BitmapSequence.js", "guessedtype": "function", "shortname": "BitmapSequence", "properties": {"currentEndFrame": {"final": "", "type": "Number", "description": "Returns the last frame of the currently playing sequence when using frameData. READ-ONLY.", "guessedname": "currentEndFrame", "guessedtype": "property"}, "currentSequence": {"final": "", "type": "String", "description": "Returns the currently playing sequence when using frameData. READ-ONLY.", "guessedname": "currentSequence", "guessedtype": "property"}, "DisplayObject_initialize": {"type": "Function", "private": "", "guessedname": "DisplayObject_initialize", "guessedtype": "property"}, "snapToPixel": {"default": "true", "type": "Boolean", "description": "Whether or not the Bitmap should be draw to the canvas at whole pixel coordinates.", "guessedname": "snapToPixel", "guessedtype": "property"}, "paused": {"default": "false", "type": "Boolean", "description": "Prevents the animation from advancing each tick automatically. For example, you could create a sprite \nsheet of icons, set paused to true, and display the appropriate icon by setting currentFrame.", "guessedname": "paused", "guessedtype": "property"}, "callback": {"type": "Function", "description": "Specifies a function to call whenever any sequence reaches its end.", "guessedname": "callback", "guessedtype": "property"}, "DisplayObject_draw": {"type": "Function", "private": "", "guessedname": "DisplayObject_draw", "guessedtype": "property"}, "DisplayObject_cloneProps": {"type": "Function", "private": "", "guessedname": "DisplayObject_cloneProps", "guessedtype": "property"}, "nextSequence": {"final": "", "type": "String", "description": "Returns the name of the next sequence that will be played, or null if it will stop playing after the \ncurrent sequence. READ-ONLY.", "guessedname": "nextSequence", "guessedtype": "property"}, "currentStartFrame": {"final": "", "type": "Number", "description": "Returns the first frame of the currently playing sequence when using frameData. READ-ONLY.", "guessedname": "currentStartFrame", "guessedtype": "property"}, "currentFrame": {"default": "-1", "type": "Number", "description": "The frame that will be drawn on the next tick. This can also be set, but it will not update the current\nsequence, so it may result in unexpected behavior if you are using frameData.", "guessedname": "currentFrame", "guessedtype": "property"}, "spriteSheet": {"type": "SpriteSheet", "description": "The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame \ndata. See SpriteSheet for more information.", "guessedname": "spriteSheet", "guessedtype": "property"}}, "description": "Displays frames or sequences of frames from a sprite sheet image. A sprite sheet is a series of images \n(usually animation frames) combined into a single image on a regular grid. For example, an animation \nconsisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across by 2 high).\nYou can display individual frames, play sequential frames as an animation, and even sequence animations \ntogether. See the SpriteSheet class for more information on setting up frames and animation."}, "SpriteSheetUtils": {"name": "SpriteSheetUtils", "namespace": "", "module": "EaselJS", "guessedname": "SpriteSheetUtils", "methods": {"extractFrame": {"return": {"type": "Image", "description": "a single frame of the specified sprite sheet as a new PNG image."}, "description": "Returns a single frame of the specified sprite sheet as a new PNG image.", "static": "", "guessedname": "extractFrame", "guessedtype": "function", "params": [{"type": "Image", "name": "spriteSheet", "description": " The SpriteSheet instance to extract a frame from."}, {"type": "Number", "name": "frame", "description": " The frame number or sequence name to extract. If a sequence \r\nname is specified, only the first frame of the sequence will be extracted."}]}, "flip": {"static": "", "params": [{"type": "Image", "name": "spriteSheet", "description": " The sprite sheet to use as the source."}, {"type": "Object", "name": "flipData", "description": " A generic object that specifies which frames will be flipped, what to name the \r\nflipped result, and how to flip the frames (horizontally, vertically, or both). Each property name \r\nindicates the name of a new sequence to create, and should reference an array where the first index is \r\nthe name of the original sequence to flip, the second index indicates whether to flip it horizontally, \r\nthe third index indicates whether to flip it vertically, and the fourth indicates what the \"next\" value \r\nfor the resulting frame data should be. For example, the following would create a new sequence named \r\n\"walk_left\" consisting of the frames from the original \"walk_right\" sequence flipped \r\nhorizontally: &#123;walk_left: [\"walk_right\", true, false]&#125;"}], "description": "Builds a new extended sprite sheet based on the specified sprite sheet by adding flipped frames\r\n(vertical, horizontal, or both). Flipping elements on the display list by using setting scaleX/scaleY\r\nto -1 is quite expensive in most browsers, so this method allows you to incur the cost of flipping once,\r\nin advance, without increasing the load size of your sprite sheets. Returns a new SpriteSheet instance\r\ncontaining the generated image and frame data.", "guessedname": "flip", "guessedtype": "function"}, "frameDataToString": {"return": {"type": "String", "description": "The a String representing the specified frameData object?"}, "description": "Returns a string representing the specified frameData object.", "static": "", "guessedname": "frameDataToString", "guessedtype": "function", "params": [{"type": "Object", "name": "frameData", "description": " The frame data to output."}]}}, "static": "", "file": "SpriteSheetUtils.js", "guessedtype": "function", "shortname": "SpriteSheetUtils", "properties": {"_workingCanvas": {"type": "HTMLCanvasElement", "protected": "", "static": "", "guessedname": "_workingCanvas", "guessedtype": "property"}, "_workingContext": {"type": "CanvasRenderingContext2D", "protected": "", "static": "", "guessedname": "_workingContext", "guessedtype": "property"}}, "description": "The SpriteSheetUtils class is a collection of static methods for working \r\nwith sprite sheets.  A sprite sheet is a series of images (usually animation frames) \r\ncombined into a single image on a regular grid. For example, an animation consisting \r\nof 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across by 2 high).\r\nThe SpriteSheetUtils class uses a static interface and should not be instantiated."}, "Container": {"name": "Container", "constructors": [{"description": "A Container is a nestable display lists that allows you to work with compound display elements. For \nexample you could group arm, leg, torso and head Bitmaps together into a Person Container, and \ntransform them as a group, while still being able to move the individual parts relative to each \nother. Children of containers have their transform and alpha properties concatenated with their \nparent Container. For example, a Shape with x=100 and alpha=0.5, placed in a Container with \nx=50 and alpha=0.7 will be rendered to the canvas at x=150 and alpha=0.35. Containers have some \noverhead, so you generally shouldn't create a Container to hold a single child."}], "namespace": "", "module": "EaselJS", "guessedname": "Container", "methods": {"addChild": {"return": {"type": "DisplayObject", "description": "The child that was added, or the last child if multiple children were added."}, "params": [{"type": "DisplayObject", "name": "child", "description": " The display object to add."}], "description": "Adds a child to the top of the display list. You can also add multiple children, such as \"addChild(child1, child2, ...);\".\nReturns the child that was added, or the last child if multiple children were added.", "guessedname": "addChild", "guessedtype": "function"}, "draw": {"params": [{"type": "CanvasRenderingContext2D", "name": "ctx", "description": " The canvas 2D context object to draw into."}, {"type": "Boolean", "name": "ignoreCache", "description": " Indicates whether the draw operation should ignore any current cache. \nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself)."}], "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "draw", "guessedtype": "function"}, "contains": {"return": {"type": "Boolean", "description": "true if the specified display object either is this container or is a descendent."}, "params": [{"type": "DisplayObject", "name": "child", "description": " The DisplayObject to be checked."}], "description": "Returns true if the specified display object either is this container or is a descendent.\n(child, grandchild, etc) of this container.", "guessedname": "contains", "guessedtype": "function"}, "getChildIndex": {"return": {"type": "Number", "description": "The index of the specified child. -1 if the child is not found."}, "params": [{"type": "DisplayObject", "name": "child", "description": " The child to return the index of."}], "description": "Returns the index of the specified child in the display list, or -1 if it is not in the display list.", "guessedname": "getChildIndex", "guessedtype": "function"}, "clone": {"return": {"type": "Container", "description": "A clone of the current Container instance."}, "params": [{"type": "Boolean", "name": "recursive", "description": " If true, all of the descendants of this container will be cloned recursively. If false, the \nproperties of the container will be cloned, but the new instance will not have any children."}], "description": "Returns a clone of this Container. Some properties that are specific to this instance's current context are reverted to\ntheir defaults (for example .parent).", "guessedname": "clone", "guessedtype": "function"}, "getNumChildren": {"return": {"type": "Number", "description": "The number of children in the display list."}, "description": "Returns the number of children in the display list.", "guessedname": "getNumChildren", "guessedtype": "function"}, "_getObjectsUnderPoint": {"return": {"type": "Array[DisplayObject]", "description": ""}, "protected": "", "params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}, {"type": "Array", "name": "arr", "description": ""}, {"type": "Number", "name": "mouseEvents", "description": " A bitmask indicating which mouseEvent types to look for. Bit 1 specifies onPress & \nonClick, bit 2 specifies it should look for onMouseOver and onMouseOut. This implementation may change."}], "guessedname": "_getObjectsUnderPoint", "guessedtype": "function"}, "removeAllChildren": {"description": "Removes all children from the display list.", "guessedname": "removeAllChildren", "guessedtype": "function"}, "getObjectUnderPoint": {"return": {"type": "DisplayObject", "description": "The top-most display object under the specified coordinates."}, "params": [{"type": "Number", "name": "x", "description": " The x position in the container to test."}, {"type": "Number", "name": "y", "description": " The y position in the container to test."}], "description": "Similar to getObjectsUnderPoint(), but returns only the top-most display object. This runs significantly faster than \ngetObjectsUnderPoint(), but is still an expensive operation. See getObjectsUnderPoint() for more information.", "guessedname": "getObjectUnderPoint", "guessedtype": "function"}, "getChildAt": {"return": {"type": "DisplayObject", "description": "The child at the specified index."}, "params": [{"type": "Number", "name": "index", "description": " The index of the child to return."}], "description": "Returns the child at the specified index.", "guessedname": "getChildAt", "guessedtype": "function"}, "addChildAt": {"return": {"type": "DisplayObject", "description": "The child that was added, or the last child if multiple children were added."}, "params": [{"type": "DisplayObject", "name": "child", "description": " The display object to add."}, {"type": "Number", "name": "index", "description": " The index to add the child at."}], "description": "Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and setting \nits parent to this Container. You can also add multiple children, such as \"addChildAt(child1, child2, ..., index);\". The \nindex must be between 0 and numChildren. For example, to add myShape under otherShape in the display list, you could use: \ncontainer.addChildAt(myShape, container.getChildIndex(otherShape)). This would also bump otherShape's index up by one. \nReturns the last child that was added, or the last child if multiple children were added.", "guessedname": "addChildAt", "guessedtype": "function"}, "removeChild": {"return": {"type": "Boolean", "description": "true if the child (or children) was removed, or false if it was not in the display list."}, "params": [{"type": "DisplayObject", "name": "child", "description": " The child to remove."}], "description": "Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is already \nknown. You can also remove multiple children, such as \"removeChild(child1, child2, ...);\". Returns true if the child \n(or children) was removed, or false if it was not in the display list.", "guessedname": "removeChild", "guessedtype": "function"}, "removeChildAt": {"return": {"type": "", "description": "true if the child (or children) was removed, or false if any index was out of range."}, "params": [{"type": "Number", "name": "index", "description": " The index of the child to remove."}], "description": "Removes the child at the specified index from the display list, and sets its parent to null. You can also remove multiple\nchildren, such as \"removeChildAt(2, 7, ...);\". Returns true if the child (or children) was removed, or false if any index\nwas out of range.", "guessedname": "removeChildAt", "guessedtype": "function"}, "sortChildren": {"params": [{"type": "Function", "name": "sortFunction", "description": " the function to use to sort the child list. See javascript's Array.sort documentation \nfor details."}], "description": "Performs an array sort operation on the child list.", "guessedname": "sortChildren", "guessedtype": "function"}, "isVisible": {"return": {"type": "Boolean", "description": "Boolean indicating whether the display object would be visible if drawn to a canvas"}, "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "isVisible", "guessedtype": "function"}, "initialize": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "getObjectsUnderPoint": {"return": {"type": "Array[DisplayObject]", "description": "An Array of DisplayObjects under the specified coordinates."}, "params": [{"type": "Number", "name": "x", "description": " The x position in the container to test."}, {"type": "Number", "name": "y", "description": " The y position in the container to test."}], "description": "Returns an array of all display objects under the specified coordinates that are in this container's display list. \nThis routine ignores any display objects with mouseEnabled set to false. The array will be sorted in order of visual \ndepth, with the top-most display object at index 0. This uses shape based hit detection, and can be an expensive operation \nto run, so it is best to use it carefully. For example, if testing for objects under the mouse, test on tick (instead of on \nmousemove), and only if the mouse's position has changed.", "guessedname": "getObjectsUnderPoint", "guessedtype": "function"}, "hitTest": {"return": {"type": "Boolean", "description": "A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified \ncoordinates."}, "params": [{"type": "", "name": "x", "description": " The x position to check in the display object's local coordinates."}, {"type": "", "name": "y", "description": " The y position to check in the display object's local coordinates."}], "description": "Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the specified \nposition). This ignores the alpha, shadow and compositeOperation of the display object, and all transform properties \nincluding regX/Y.", "guessedname": "hitTest", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "DisplayObject", "superclass": "DisplayObject", "file": "Container.js", "guessedtype": "function", "shortname": "Container", "properties": {"DisplayObject_draw": {"type": "Function", "private": "", "guessedname": "DisplayObject_draw", "guessedtype": "property"}, "DisplayObject_initialize": {"type": "Function", "private": "", "guessedname": "DisplayObject_initialize", "guessedtype": "property"}, "children": {"default": "null", "type": "Array[DisplayObject]", "description": "The array of children in the display list. You should usually use the child management methods, \nrather than accessing this directly, but it is included for advanced users.", "guessedname": "children", "guessedtype": "property"}}, "description": "A Container is a nestable display lists that allows you to work with compound display elements. For \nexample you could group arm, leg, torso and head Bitmaps together into a Person Container, and \ntransform them as a group, while still being able to move the individual parts relative to each \nother. Children of containers have their transform and alpha properties concatenated with their \nparent Container. For example, a Shape with x=100 and alpha=0.5, placed in a Container with \nx=50 and alpha=0.7 will be rendered to the canvas at x=150 and alpha=0.35. Containers have some \noverhead, so you generally shouldn't create a Container to hold a single child."}, "UID": {"name": "UID", "namespace": "", "module": "EaselJS", "guessedname": "UID", "methods": {"get": {"static": "", "return": {"type": "Number", "description": "The next unique id"}, "description": "Returns the next unique id.", "guessedname": "get", "guessedtype": "function"}}, "static": "", "file": "UID.js", "guessedtype": "function", "shortname": "UID", "properties": {"_nextID": {"protected": "", "type": "Number", "guessedname": "_nextID", "guessedtype": "property"}}, "description": "Global utility for generating sequential unique ID numbers.\nThe UID class uses a static interface (ex. UID.get()) and should not be instantiated."}, "Point": {"name": "Point", "constructors": [{"params": [{"type": "Number", "name": "x", "description": " X position. Default is 0."}, {"type": "Number", "name": "y", "description": " Y position. Default is 0."}], "description": "Represents a point on a 2 dimensional x / y coordinate system."}], "namespace": "", "module": "EaselJS", "guessedname": "Point", "methods": {"initialize": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "clone": {"return": {"type": "Point", "description": "a clone of the Point instance."}, "description": "Returns a clone of the Point instance.", "guessedname": "clone", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}}, "file": "Point.js", "guessedtype": "function", "shortname": "Point", "properties": {"y": {"type": "Number", "description": "Y position.", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Number", "description": "X position.", "guessedname": "x", "guessedtype": "property"}}, "description": "Represents a point on a 2 dimensional x / y coordinate system."}, "Text": {"name": "Text", "constructors": [{"params": [{"type": "String", "name": "text", "description": " Optional. The text to display."}, {"type": "String", "name": "font", "description": " Optional. The font style to use. Any valid value for the CSS font attribute is \nacceptable (ex. \"36px bold Arial\")."}, {"type": "String", "name": "color", "description": " Optional. The color to draw the text in. Any valid value for the CSS color attribute\nis acceptable (ex. \"#F00\")."}], "description": "Allows you to display one or more lines of dynamic text (not user editable) in the display list.\nLine wrapping support (using the lineWidth is very basic, wrapping on spaces and tabs only. Note\nthat as an alternative to Text, you can position HTML text above or below the canvas relative to \nitems in the display list using the localToGlobal() method."}], "namespace": "", "module": "EaselJS", "guessedname": "Text", "methods": {"draw": {"params": [{"type": "CanvasRenderingContext2D", "name": "ctx", "description": " The canvas 2D context object to draw into."}, {"type": "Boolean", "name": "ignoreCache", "description": " Indicates whether the draw operation should ignore any current cache. \nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself)."}], "description": "Draws the Text into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "draw", "guessedtype": "function"}, "_drawTextLine": {"protected": "", "params": [{"type": "CanvasRenderingContext2D", "name": "ctx", "description": ""}, {"type": "Text", "name": "text", "description": ""}, {"type": "Number", "name": "y", "description": ""}], "guessedname": "_drawTextLine", "guessedtype": "function"}, "cloneProps": {"protected": "", "params": [{"type": "Text", "name": "o", "description": ""}], "guessedname": "cloneProps", "guessedtype": "function"}, "clone": {"return": {"type": "Point", "description": "a clone of the Point instance."}, "description": "Returns a clone of the Point instance.", "guessedname": "clone", "guessedtype": "function"}, "_getWorkingContext": {"protected": "", "guessedname": "_getWorkingContext", "guessedtype": "function"}, "getMeasuredWidth": {"return": {"type": "Number", "description": "The measured, untransformed width of the text."}, "description": "Returns the measured, untransformed width of the text.", "guessedname": "getMeasuredWidth", "guessedtype": "function"}, "getMeasuredLineHeight": {"return": {"type": "Number", "description": "an approximate line height of the text, ignoring the lineHeight property. This is \nbased on the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts."}, "description": "Returns an approximate line height of the text, ignoring the lineHeight property. This is based \non the measured width of a \"M\" character multiplied by 1.2, which approximates em for most fonts.", "guessedname": "getMeasuredLineHeight", "guessedtype": "function"}, "isVisible": {"return": {"type": "Boolean", "description": "Boolean indicating whether the display object would be visible if drawn to a canvas"}, "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "isVisible", "guessedtype": "function"}, "initialize": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}}, "extends": "DisplayObject", "superclass": "DisplayObject", "file": "Text.js", "guessedtype": "function", "shortname": "Text", "properties": {"lineWidth": {"type": "Number", "description": "Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null, \nthe text will not be wrapped.", "guessedname": "lineWidth", "guessedtype": "property"}, "outline": {"type": "Boolean", "description": "If true, the text will be drawn as a stroke (outline). If false, the text will be drawn as a fill.", "guessedname": "outline", "guessedtype": "property"}, "maxWidth": {"type": "Number", "description": "The maximum width to draw the text. If maxWidth is specified (not null), the text will be condensed or \nshrunk to make it fit in this width. For detailed information view the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-0\">\nwhatwg spec</a>.", "guessedname": "maxWidth", "guessedtype": "property"}, "color": {"type": "String", "description": "The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. \"#F00\").", "guessedname": "color", "guessedtype": "property"}, "text": {"type": "String", "description": "The text to display.", "guessedname": "text", "guessedtype": "property"}, "DisplayObject_initialize": {"type": "Function", "private": "", "guessedname": "DisplayObject_initialize", "guessedtype": "property"}, "_workingContext": {"type": "CanvasRenderingContext2D", "private": "", "guessedname": "_workingContext", "guessedtype": "property"}, "DisplayObject_draw": {"type": "Function", "private": "", "guessedname": "DisplayObject_draw", "guessedtype": "property"}, "textBaseline": {"type": "String", "description": "The vertical alignment point on the font. Any of \"top\", \"hanging\", \"middle\", \"alphabetic\", \n\"ideographic\", or \"bottom\". For detailed information view the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-0\">\nwhatwg spec</a>.", "guessedname": "textBaseline", "guessedtype": "property"}, "DisplayObject_cloneProps": {"type": "Function", "private": "", "guessedname": "DisplayObject_cloneProps", "guessedtype": "property"}, "lineHeight": {"type": "Number", "description": "Indicates the line height (vertical distance between baselines) for multi-line text. If null, \nthe value of getMeasuredLineHeight is used.", "guessedname": "lineHeight", "guessedtype": "property"}, "font": {"type": "String", "description": "The font style to use. Any valid value for the CSS font attribute is acceptable (ex. \"bold 36px Arial\").", "guessedname": "font", "guessedtype": "property"}, "textAlign": {"type": "String", "description": "The horizontal text alignment. Any of \"start\", \"end\", \"left\", \"right\", and \"center\". For detailed \ninformation view the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-0\">\nwhatwg spec</a>.", "guessedname": "textAlign", "guessedtype": "property"}}, "description": "Allows you to display one or more lines of dynamic text (not user editable) in the display list.\nLine wrapping support (using the lineWidth is very basic, wrapping on spaces and tabs only. Note\nthat as an alternative to Text, you can position HTML text above or below the canvas relative to \nitems in the display list using the localToGlobal() method."}, "Shape": {"name": "Shape", "namespace": "", "module": "EaselJS", "guessedname": "Shape", "methods": {"draw": {"params": [{"type": "CanvasRenderingContext2D", "name": "ctx", "description": " The canvas 2D context object to draw into."}, {"type": "Boolean", "name": "ignoreCache", "description": " Indicates whether the draw operation should ignore any current cache. \nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself)."}], "description": "Draws the Shape into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "draw", "guessedtype": "function"}, "isVisible": {"return": {"type": "Boolean", "description": "Boolean indicating whether the Shape would be visible if drawn to a canvas"}, "description": "Returns true or false indicating whether the Shape would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "isVisible", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}, "clone": {"params": [{"type": "Boolean", "name": "recursive", "description": " If true, this Shape's Graphics instance will also be cloned. If false, the Graphics instance \nwill be shared with the new Shape."}], "description": "Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to \ntheir defaults (for example .parent).", "guessedname": "clone", "guessedtype": "function"}, "initialize\nparam {Graphics} graphics": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}}, "extends": "DisplayObject", "superclass": "DisplayObject", "file": "Shape.js", "guessedtype": "function", "shortname": "Shape", "param": "{Graphics} graphics Optional. The graphics instance to display. If null, a new Graphics instance will be created.", "properties": {"DisplayObject_draw": {"type": "Function", "private": "", "guessedname": "DisplayObject_draw", "guessedtype": "property"}, "DisplayObject_initialize": {"type": "Function", "private": "", "guessedname": "DisplayObject_initialize", "guessedtype": "property"}, "graphics": {"type": "Graphics", "description": "The graphics instance to display.", "guessedname": "graphics", "guessedtype": "property"}}, "description": "A Shape allows you to display vector art in the display list. It composites a Graphics instance which exposes all of the vector\ndrawing methods. The Graphics instance can be shared between multiple Shape instances to display the same vector graphics with different\npositions or transforms. If the vector art will not change between draws, you may want to use the cache() method to reduce the rendering cost."}, "Bitmap": {"name": "Bitmap", "constructors": [{"params": [{"type": "Image | HTMLCanvasElement | HTMLVideoElement", "name": "image", "description": " The Image, Canvas, or Video to render to the display list."}], "description": "A Bitmap represents an Image, Canvas, or Video in the display list."}], "namespace": "", "module": "EaselJS", "guessedname": "Bitmap", "methods": {"draw": {"params": [{"type": "CanvasRenderingContext2D", "name": "ctx", "description": " The canvas 2D context object to draw into."}, {"type": "Boolean", "name": "ignoreCache", "description": " Indicates whether the draw operation should ignore any current cache. \nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself)."}], "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "draw", "guessedtype": "function"}, "uncache": {"description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance."}, "cache": {"description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance."}, "updateCache": {"description": "Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.\nYou should not cache Bitmap instances as it can degrade performance."}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}, "isVisible": {"return": {"type": "Boolean", "description": "Boolean indicating whether the display object would be visible if drawn to a canvas"}, "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "isVisible", "guessedtype": "function"}, "initialize": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "clone": {"return": {"type": "Bitmap", "description": "a clone of the Bitmap instance."}, "description": "Returns a clone of the Bitmap instance.", "guessedname": "clone", "guessedtype": "function"}}, "extends": "DisplayObject", "superclass": "DisplayObject", "file": "Bitmap.js", "guessedtype": "function", "shortname": "Bitmap", "properties": {"image": {"type": "Image | HTMLCanvasElement | HTMLVideoElement", "description": "The image to render. This can be an Image, a Canvas, or a Video.", "guessedname": "image", "guessedtype": "property"}, "DisplayObject_initialize": {"type": "Function", "private": "", "guessedname": "DisplayObject_initialize", "guessedtype": "property"}, "DisplayObject_draw": {"type": "Function", "private": "", "guessedname": "DisplayObject_draw", "guessedtype": "property"}, "snapToPixel": {"default": "true", "type": "Boolean", "description": "Whether or not the Bitmap should be draw to the canvas at whole pixel coordinates.", "guessedname": "snapToPixel", "guessedtype": "property"}}, "description": "A Bitmap represents an Image, Canvas, or Video in the display list."}, "MouseEvent": {"name": "MouseEvent", "constructors": [{"params": [{"type": "String", "name": "type", "description": " The event type."}, {"type": "Number", "name": "stageX", "description": " The mouseX position relative to the stage."}, {"type": "Number", "name": "stageY", "description": " The mouseY position relative to the stage."}], "description": "This is passed as the parameter to onPress, onMouseMove, onMouseUp, onMouseDown, and onClick handlers on \nDisplayObject instances.\nBy default, mouse events are disabled for performance reasons. In order to enabled them for a specified stage\nset mouseEventsEnabled to true on your stage instance."}], "namespace": "", "module": "EaselJS", "events": {"onMouseMove": {"params": [{"type": "MouseEvent", "name": "event", "description": " A MouseEvent instance with information about the current mouse event."}], "description": "For events of type \"onPress\" and \"onMouseDown\" only you can assign a handler to the onMouseMove \nproperty. This handler will be called every time the mouse is moved until the mouse is released. \nThis is useful for operations such as drag and drop.", "guessedname": "onMouseMove", "guessedtype": "property"}, "onMouseUp": {"params": [{"type": "MouseEvent", "name": "event", "description": " A MouseEvent instance with information about the current mouse event."}], "description": "For events of type \"onPress\" and \"onMouseDown\" only you can assign a handler to the onMouseUp \nproperty. This handler will be called every time the mouse is moved until the mouse is released. \nThis is useful for operations such as drag and drop.", "guessedname": "onMouseUp", "guessedtype": "property"}}, "guessedname": "MouseEvent", "methods": {"initialize": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "clone": {"return": {"type": "MouseEvent", "description": "a clone of the MouseEvent instance."}, "description": "Returns a clone of the MouseEvent instance.", "guessedname": "clone", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}}, "file": "MouseEvent.js", "guessedtype": "function", "shortname": "MouseEvent", "properties": {"stageX": {"type": "Number", "description": "The mouseX position on the stage.", "guessedname": "stageX", "guessedtype": "property"}, "stageY": {"type": "Number", "description": "The mouseY position on the stage.", "guessedname": "stageY", "guessedtype": "property"}, "type": {"type": "String", "description": "The type of mouse event. This will be the same as the handler it maps to (onPress, \nonMouseDown, onMouseUp, onMouseMove, or onClick).", "guessedname": "type", "guessedtype": "property"}}, "description": "This is passed as the parameter to onPress, onMouseMove, onMouseUp, onMouseDown, and onClick handlers on \nDisplayObject instances.\nBy default, mouse events are disabled for performance reasons. In order to enabled them for a specified stage\nset mouseEventsEnabled to true on your stage instance."}, "DisplayObject": {"name": "DisplayObject", "constructors": [{"description": "DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as \nSprite, Bitmap, and Shape. DisplayObject is the base class for all display classes in the CanvasDisplay library. \nIt defines the core properties and methods that are shared between all display objects."}], "namespace": "", "module": "EaselJS", "events": {"onMouseOut": {"params": [{"type": "MouseEvent", "name": "event", "description": " MouseEvent with information about the event."}], "description": "The onMouseOut callback is called when the user rolls off of the display object. You must enable this event using\nstage.enableMouseOver(). The handler is passed a single param containing the corresponding MouseEvent instance.", "guessedname": "onMouseOut", "guessedtype": "property"}, "onMouseOver": {"params": [{"type": "MouseEvent", "name": "event", "description": " MouseEvent with information about the event."}], "description": "The onMouseOver callback is called when the user rolls over the display object. You must enable this event using \nstage.enableMouseOver(). The handler is passed a single param containing the corresponding MouseEvent instance.", "guessedname": "onMouseOver", "guessedtype": "property"}, "onClick": {"params": [{"type": "MouseEvent", "name": "event", "description": " MouseEvent with information about the event."}], "description": "The onClick callback is called when the user presses down on and then releases the mouse button over this \ndisplay object. The handler is passed a single param containing the corresponding MouseEvent instance. If an \nonClick handler is set on a container, it will receive the event if any of its children are clicked.", "guessedname": "onClick", "guessedtype": "property"}, "onPress": {"params": [{"type": "MouseEvent", "name": "event", "description": " MouseEvent with information about the event."}], "description": "The onPress callback is called when the user presses down on their mouse over this display object. The handler \nis passed a single param containing the corresponding MouseEvent instance. You can subscribe to the onMouseMove\nand onMouseUp callbacks of the event object to receive these events until the user releases the mouse button. \nIf an onPress handler is set on a container, it will receive the event if any of its children are clicked.", "guessedname": "onPress", "guessedtype": "property"}}, "guessedname": "DisplayObject", "methods": {"hitTest": {"return": {"type": "Boolean", "description": "A Boolean indicting whether a visible portion of the DisplayObject intersect the specified \nlocal Point."}, "params": [{"type": "Number", "name": "x", "description": " The x position to check in the display object's local coordinates."}, {"type": "Number", "name": "y", "description": " The y position to check in the display object's local coordinates."}], "description": "Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at \nthe specified position). This ignores the alpha, shadow and compositeOperation of the display object, and all \ntransform properties including regX/Y.", "guessedname": "hitTest", "guessedtype": "function"}, "draw": {"params": [{"type": "CanvasRenderingContext2D", "name": "ctx", "description": " The canvas 2D context object to draw into."}, {"type": "Boolean", "name": "ignoreCache", "description": " Indicates whether the draw operation should ignore any current cache. \nFor example, used for drawing the cache (to prevent it from simply drawing an existing cache back\ninto itself)."}], "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "draw", "guessedtype": "function"}, "localToLocal": {"return": {"type": "Point", "description": "Returns a Point instance with x and y properties correlating to the transformed position \nin the target's coordinate space."}, "params": [{"type": "Number", "name": "x", "description": " The x position in the source display object to transform."}, {"type": "Number", "name": "y", "description": " The y position on the stage to transform."}, {"type": "DisplayObject", "name": "target", "description": " The target display object to which the coordinates will be transformed."}], "description": "Transforms the specified x and y position from the coordinate space of this display object to the\ncoordinate space of the target display object. Returns a Point instance with x and y properties\ncorrelating to the transformed position in the target's coordinate space. Effectively the same as calling\nvar pt = this.localToGlobal(x, y); pt = target.globalToLocal(pt.x, pt.y);", "guessedname": "localToLocal", "guessedtype": "function"}, "localToGlobal": {"return": {"type": "Point", "description": "A Point instance with x and y properties correlating to the transformed coordinates \non the stage."}, "params": [{"type": "Number", "name": "x", "description": " The x position in the source display object to transform."}, {"type": "Number", "name": "y", "description": " The y position in the source display object to transform."}], "description": "Transforms the specified x and y position from the coordinate space of the display object\nto the global (stage) coordinate space. For example, this could be used to position an HTML label\nover a specific point on a nested display object. Returns a Point instance with x and y properties\ncorrelating to the transformed coordinates on the stage.", "guessedname": "localToGlobal", "guessedtype": "function"}, "cloneProps": {"protected": "", "params": [{"type": "DisplayObject", "name": "o", "description": " The DisplayObject instance which will have properties from the current DisplayObject\ninstance copied into."}], "guessedname": "cloneProps", "guessedtype": "function"}, "uncache": {"description": "Clears the current cache. See cache() for more information.", "guessedname": "uncache", "guessedtype": "function"}, "cache": {"params": [{"type": "Number", "name": "x", "description": " The x coordinate origin for the cache region."}, {"type": "Number", "name": "y", "description": " The y coordinate origin for the cache region."}, {"type": "Number", "name": "width", "description": " The width of the cache region."}, {"type": "Number", "name": "height", "description": " The height of the cache region."}], "description": "Draws the display object into a new canvas, which is then used for subsequent draws. For complex content \nthat does not change frequently (ex. a Sprite with many children that do not move, or a complex vector Shape),\nthis can provide for much faster rendering because the content does not need to be re-rendered each tick. The \ncached display object can be moved, rotated, faded, etc freely, however if it's content changes, you must manually\nupdate the cache by calling updateCache() or cache() again. You must specify the cache area via the x, y, w, \nand h parameters. This defines the rectangle that will be rendered and cached using this display object's \ncoordinates. For example if you defined a Shape that drew a circle at 0, 0 with a radius of 25, you could call \nmyShape.cache(-25, -25, 50, 50) to cache the full shape.", "guessedname": "cache", "guessedtype": "function"}, "globalToLocal": {"return": {"type": "Point", "description": "A Point instance with x and y properties correlating to the transformed position in the\ndisplay object's coordinate space."}, "params": [{"type": "Number", "name": "x", "description": " The x position on the stage to transform."}, {"type": "Number", "name": "y", "description": " The y position on the stage to transform."}], "description": "Transforms the specified x and y position from the global (stage) coordinate space to the\ncoordinate space of the display object. For example, this could be used to determine\nthe current mouse position within the display object. Returns a Point instance with x and y properties\ncorrelating to the transformed position in the display object's coordinate space.", "guessedname": "globalToLocal", "guessedtype": "function"}, "updateCache": {"params": [{"type": "String", "name": "compositeOperation", "description": " The compositeOperation to use, or null to clear the cache and redraw it. \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\nwhatwg spec on compositing</a>."}], "description": "Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.\nIf compositeOperation is null the current cache will be cleared prior to drawing. Otherwise the display object\nwill be drawn over the existing cache using the specified compositeOperation.", "guessedname": "updateCache", "guessedtype": "function"}, "applyShadow": {"protected": "", "params": [{"type": "CanvasRenderingContext2D", "name": "ctx", "description": ""}, {"type": "Shadow", "name": "shadow", "description": ""}], "guessedname": "applyShadow", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}, "_testHit": {"return": {"type": "Boolean", "description": ""}, "protected": "", "params": [{"type": "CanvasRenderingContext2D", "name": "ctx", "description": ""}], "guessedname": "_testHit", "guessedtype": "function"}, "getStage": {"return": {"type": "Stage", "description": "The Stage instance that the display object is a descendent of. null if the DisplayObject has not \nbeen added to a Stage."}, "description": "Returns the stage that this display object will be rendered on, or null if it has not been added to one.", "guessedname": "getStage", "guessedtype": "function"}, "isVisible": {"return": {"type": "Boolean", "description": "Boolean indicating whether the display object would be visible if drawn to a canvas"}, "description": "Returns true or false indicating whether the display object would be visible if drawn to a canvas.\nThis does not account for whether it would be visible within the boundaries of the stage.\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "isVisible", "guessedtype": "function"}, "initialize": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "clone": {"return": {"type": "DisplayObject", "description": "A clone of the current DisplayObject instance."}, "description": "Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are \nreverted to their defaults (for example .parent).", "guessedname": "clone", "guessedtype": "function"}, "getConcatenatedMatrix": {"return": {"type": "Matrix2D", "description": "a concatenated Matrix2D object representing the combined transform of\nthe display object and all of its parent Containers up to the highest level ancestor (usually the stage)."}, "params": [{"type": "Matrix2D", "name": "mtx", "description": " Optional. A Matrix2D object to populate with the calculated values. If null, a new \nMatrix object is returned."}], "description": "Generates a concatenated Matrix2D object representing the combined transform of\nthe display object and all of its parent Containers up to the highest level ancestor\n(usually the stage). This can be used to transform positions between coordinate spaces,\nsuch as with localToGlobal and globalToLocal.", "guessedname": "getConcatenatedMatrix", "guessedtype": "function"}}, "file": "DisplayObject.js", "guessedtype": "function", "shortname": "DisplayObject", "properties": {"compositeOperation": {"default": "null", "type": "String", "description": "The composite operation indicates how the pixels of this display object will be composited with the elements \nbehind it. If null, this property is inherited from the parent container. For more information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing\">\nwhatwg spec on compositing</a>.", "guessedname": "compositeOperation", "guessedtype": "property"}, "visible": {"default": "true", "type": "Boolean", "description": "Indicates whether this display object should be rendered to the canvas and included when running\nStage.getObjectsUnderPoint().", "guessedname": "visible", "guessedtype": "property"}, "suppressCrossDomainErrors": {"description": "Suppresses errors generated when using features like hitTest, onPress/onClick, and getObjectsUnderPoint with cross \ndomain content", "default": "false", "static": "", "guessedname": "suppressCrossDomainErrors", "guessedtype": "property", "type": "Boolean"}, "_cacheOffsetY": {"default": "0", "protected": "", "type": "Number", "guessedname": "_cacheOffsetY", "guessedtype": "property"}, "_cacheOffsetX": {"default": "0", "protected": "", "type": "Number", "guessedname": "_cacheOffsetX", "guessedtype": "property"}, "_revertShadow": {"default": "false", "protected": "", "type": "Boolean", "guessedname": "_revertShadow", "guessedtype": "property"}, "id": {"default": "-1", "type": "Number", "description": "Unique ID for this display object. Makes display objects easier for some uses.", "guessedname": "id", "guessedtype": "property"}, "scaleX": {"default": "1", "type": "Number", "description": "The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display\nobject to twice it's nominal width.", "guessedname": "scaleX", "guessedtype": "property"}, "scaleY": {"default": "1", "type": "Number", "description": "The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display\nobject to half it's nominal height.", "guessedname": "scaleY", "guessedtype": "property"}, "_restoreContext": {"default": "false", "protected": "", "type": "Boolean", "guessedname": "_restoreContext", "guessedtype": "property"}, "_hitTestContext": {"type": "CanvasRenderingContext2D", "protected": "", "static": "", "guessedname": "_hitTestContext", "guessedtype": "property"}, "cacheCanvas": {"default": "null", "type": "HTMLCanvasElement", "description": "If a cache is active, this returns the canvas that holds the cached version of this display object. See cache()\nfor more information. READ-ONLY.", "guessedname": "cacheCanvas", "guessedtype": "property"}, "_activeContext": {"default": "null", "protected": "", "type": "CanvasRenderingContext2D", "guessedname": "_activeContext", "guessedtype": "property"}, "parent": {"description": "A reference to the Sprite or Stage object that contains this display object, or null if it has not been added to \none. READ-ONLY.", "default": "null", "guessedname": "parent", "guessedtype": "property", "type": "DisplayObject", "final": ""}, "_hitTestCanvas": {"type": "HTMLCanvasElement", "protected": "", "static": "", "guessedname": "_hitTestCanvas", "guessedtype": "property"}, "skewY": {"default": "0", "type": "Number", "description": "The factor to skew this display object vertically.", "guessedname": "skewY", "guessedtype": "property"}, "skewX": {"default": "0", "type": "Number", "description": "The factor to skew this display object horizontally.", "guessedname": "skewX", "guessedtype": "property"}, "alpha": {"default": "1", "type": "Number", "description": "The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.", "guessedname": "alpha", "guessedtype": "property"}, "shadow": {"default": "null", "type": "Shadow", "description": "A shadow object that defines the shadow to render on this display object. Set to null to remove a shadow. If \nnull, this property is inherited from the parent container.", "guessedname": "shadow", "guessedtype": "property"}, "_workingMatrix": {"type": "Matrix2D", "protected": "", "static": "", "guessedname": "_workingMatrix", "guessedtype": "property"}, "_cacheDraw": {"default": "false", "protected": "", "type": "Boolean", "guessedname": "_cacheDraw", "guessedtype": "property"}, "rotation": {"default": "0", "type": "Number", "description": "The rotation in degrees for this display object.", "guessedname": "rotation", "guessedtype": "property"}, "name": {"default": "null", "type": "String", "description": "An optional name for this display object. Included in toString(). Useful for debugging.", "guessedname": "name", "guessedtype": "property"}, "regX": {"default": "0", "type": "Number", "description": "The x offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\nit's center, you would set regX and regY to 50.", "guessedname": "regX", "guessedtype": "property"}, "regY": {"default": "0", "type": "Number", "description": "The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around\nit's center, you would set regX and regY to 50.", "guessedname": "regY", "guessedtype": "property"}, "_revertY": {"default": "0", "protected": "", "type": "Number", "guessedname": "_revertY", "guessedtype": "property"}, "_revertX": {"default": "0", "protected": "", "type": "Number", "guessedname": "_revertX", "guessedtype": "property"}, "mouseEnabled": {"default": "true", "type": "Boolean", "description": "Indicates whether to include this object when running Stage.getObjectsUnderPoint(). Setting this to true for \nSprites will cause the Sprite to be returned (not its children) regardless of whether it's mouseChildren property \nis true.", "guessedname": "mouseEnabled", "guessedtype": "property"}, "snapToPixel": {"default": "false", "type": "Boolean", "description": "Indicates whether the display object should have it's x & y position rounded prior to drawing it to stage. \nThis only applies if the enclosing stage has snapPixelsEnabled set to true, and the display object's composite \ntransform does not include any scaling, rotation, or skewing. The snapToPixel property is true by default for \nBitmap and BitmapSequence instances, and false for all other display objects.", "guessedname": "snapToPixel", "guessedtype": "property"}, "_revertAlpha": {"default": "1", "protected": "", "type": "Number", "guessedname": "_revertAlpha", "guessedtype": "property"}, "y": {"default": "0", "type": "Number", "description": "The y (vertical) position of the display object, relative to its parent.", "guessedname": "y", "guessedtype": "property"}, "x": {"default": "0", "type": "Number", "description": "The x (horizontal) position of the display object, relative to its parent.", "guessedname": "x", "guessedtype": "property"}}, "description": "DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as \nSprite, Bitmap, and Shape. DisplayObject is the base class for all display classes in the CanvasDisplay library. \nIt defines the core properties and methods that are shared between all display objects."}, "Command": {"name": "Command", "for": "Graphics", "innerClasses": ["Graphics"], "constructors": [{"description": "Inner class used by the Graphics class. Used to create the instruction lists used in Graphics:"}], "namespace": "", "module": "EaselJS", "methods": {"exec": {"params": [{"type": "Object", "name": "scope", "description": ""}], "guessedname": "exec", "guessedtype": "function"}}, "file": "Graphics.js", "shortname": "Command", "description": "Inner class used by the Graphics class. Used to create the instruction lists used in Graphics:"}, "Graphics": {"name": "Graphics", "for": "Graphics", "constructors": [{"params": [{"type": "String", "name": "instructions", "description": " Optional. This is a string that will be eval'ed in the scope of this Graphics object. \nThis provides a mechanism for generating a vector shape from a serialized string. Ex. \n\"beginFill('#F00');drawRect(0, 0, 10, 10);\""}], "description": "The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a specified context.\nNote that you can use Graphics without any dependency on the Easel framework by calling draw() directly,\nor it can be used with the Shape object to draw vector graphics within the context of an Easel display list.<br/><br/>\nNote that all drawing methods in Graphics return the Graphics instance, so they can be chained together. For example, the following \nline of code would generate the instructions to draw a rectangle with a red stroke and blue fill, then render it to the specified \ncontext2D:<br/>\nmyGraphics.beginStroke(\"#F00\").beginFill(\"#00F\").drawRect(20, 20, 100, 50).draw(myContext2D);"}], "namespace": "", "module": "EaselJS", "guessedname": "Graphics", "methods": {"quadraticCurveTo": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "cpx", "description": ""}, {"type": "Number", "name": "cpy", "description": ""}, {"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}], "description": "Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy).  For detailed information, \nread the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto\">\nwhatwg spec</a>.", "guessedname": "quadraticCurveTo", "guessedtype": "function"}, "drawRoundRectComplex": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}, {"type": "Number", "name": "w", "description": ""}, {"type": "Number", "name": "h", "description": ""}, {"type": "Number", "name": "radiusTL", "description": " Top left corner radius."}, {"type": "Number", "name": "radiusTR", "description": " Top right corner radius."}, {"type": "Number", "name": "radiusBR", "description": " Bottom right corner radius."}, {"type": "Number", "name": "radiusBL", "description": " Bottom left corner radius."}], "description": "Draws a rounded rectangle with different corner radiuses.", "guessedname": "drawRoundRectComplex", "guessedtype": "function"}, "moveTo": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "x", "description": " The x coordinate the drawing point should move to."}, {"type": "Number", "name": "y", "description": " The y coordinate the drawing point should move to."}], "description": "Moves the drawing point to the specified position.", "guessedname": "moveTo", "guessedtype": "function"}, "lineTo": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "x", "description": " The x coordinate the drawing point should draw to."}, {"type": "Number", "name": "y", "description": " The y coordinate the drawing point should draw to."}], "description": "Draws a line from the current drawing point to the specified position, which become the new current drawing point. \nFor detailed information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)\">\nwhatwg spec</a>.", "guessedname": "lineTo", "guessedtype": "function"}, "_updateInstructions": {"protected": "", "guessedname": "_updateInstructions", "guessedtype": "function"}, "drawRoundRect": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}, {"type": "Number", "name": "w", "description": ""}, {"type": "Number", "name": "h", "description": ""}, {"type": "Number", "name": "radius", "description": " Corner radius."}], "description": "Draws a rounded rectangle with all corners with the specified radius.", "guessedname": "drawRoundRect", "guessedtype": "function"}, "drawPolyStar": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "x", "description": " Position of the center of the shape."}, {"type": "Number", "name": "y", "description": " Position of the center of the shape."}, {"type": "Number", "name": "radius", "description": " The outer radius of the shape."}, {"type": "Number", "name": "sides", "description": " The number of points on the star or sides on the polygon."}, {"type": "Number", "name": "pointSize", "description": " The depth or \"pointy-ness\" of the star points. A pointSize of 0 will draw a regular polygon (no points), \na pointSize of 1 will draw nothing because the points are infinitely pointy."}, {"type": "Number", "name": "angle", "description": " The angle of the first point / corner. For example a value of 0 will draw the first point directly to the \nright of the center."}], "description": "Draws a star if pointSize is greater than 0 or a regular polygon if pointSize is 0 with the specified number of points.\nFor example, the following code will draw a familiar 5 pointed star shape centered at 100, 100 and with a radius of 50:\nmyGraphics.beginFill(\"#FF0\").drawPolyStar(100, 100, 50, 5, 0.6, -90); // -90 makes the first point vertical", "guessedname": "drawPolyStar", "guessedtype": "function"}, "arc": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}, {"type": "Number", "name": "radius", "description": ""}, {"type": "Number", "name": "startAngle", "description": " Measured in radians."}, {"type": "Number", "name": "endAngle", "description": " Measured in radians."}, {"type": "Boolean", "name": "anticlockwise", "description": ""}], "description": "Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y). For example \narc(100, 100, 20, 0, Math.PI*2) would draw a full circle with a radius of 20 centered at (100, 100). For detailed \ninformation, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arc\">whatwg spec</a>.", "guessedname": "arc", "guessedtype": "function"}, "beginBitmapFill": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "", "name": "image", "description": " The Image, Canvas, or Video object to use as the pattern."}, {"type": "String", "name": "repetition", "description": " Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\", \"repeat-x\",\n\"repeat-y\", or \"no-repeat\". Defaults to \"repeat\"."}], "description": "Begins a pattern fill using the specified image. This ends the current subpath.", "guessedname": "beginBitmapFill", "guessedtype": "function"}, "getHSL": {"return": {"type": "", "description": "a CSS compatible color string based on the specified HSL numeric color values in the format \n\"hsla(360,100,100,1.0)\", or if alpha is null then in the format \"hsl(360,100,100)\". For example, \nGraphics.getHSL(150, 100, 70) will return \"hsl(150,100,70)\"."}, "description": "Returns a CSS compatible color string based on the specified HSL numeric color values in the format \"hsla(360,100,100,1.0)\", \nor if alpha is null then in the format \"hsl(360,100,100)\". For example, Graphics.getHSL(150, 100, 70) will return \n\"hsl(150,100,70)\".", "static": "", "guessedname": "getHSL", "guessedtype": "function", "params": [{"type": "Number", "name": "hue", "description": " The hue component for the color, between 0 and 360."}, {"type": "Number", "name": "saturation", "description": " The saturation component for the color, between 0 and 100."}, {"type": "Number", "name": "lightness", "description": " The lightness component for the color, between 0 and 100."}, {"type": "Number", "name": "alpha", "description": " Optional. The alpha component for the color where 0 is fully transparent and 1 is fully opaque."}]}, "beginLinearGradientStroke": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "", "name": "colors", "description": " An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient drawing from red to blue."}, {"type": "", "name": "ratios", "description": " An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw the first color to 10% then interpolating to the second color at 90%."}, {"type": "", "name": "x0", "description": " The position of the first point defining the line that defines the gradient direction and size."}, {"type": "", "name": "y0", "description": " The position of the first point defining the line that defines the gradient direction and size."}, {"type": "", "name": "x1", "description": " The position of the second point defining the line that defines the gradient direction and size."}, {"type": "", "name": "y1", "description": " The position of the second point defining the line that defines the gradient direction and size."}], "description": "Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current subpath. For example, the following code defines a black to white vertical gradient ranging from 20px to 120px, and draws a square to display it:<br/>\nmyGraphics.setStrokeStyle(10).beginLinearGradientStroke([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);", "guessedname": "beginLinearGradientStroke", "guessedtype": "function"}, "beginFill": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "String", "name": "color", "description": " A CSS compatible color value (ex. \"#FF0000\" or \"rgba(255,0,0,0.5)\"). Setting to null will \nresult in no fill."}], "description": "Begins a fill with the specified color. This ends the current subpath.", "guessedname": "beginFill", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}, "beginLinearGradientFill": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Array[String]", "name": "colors", "description": " An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient \ndrawing from red to blue."}, {"type": "Array[Number]", "name": "ratios", "description": " An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw \nthe first color to 10% then interpolating to the second color at 90%."}, {"type": "Number", "name": "x0", "description": " The position of the first point defining the line that defines the gradient direction and size."}, {"type": "Number", "name": "y0", "description": " The position of the first point defining the line that defines the gradient direction and size."}, {"type": "Number", "name": "x1", "description": " The position of the second point defining the line that defines the gradient direction and size."}, {"type": "Number", "name": "y1", "description": " The position of the second point defining the line that defines the gradient direction and size."}], "description": "Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1). This ends the current subpath. For example, the\nfollowing code defines a black to white vertical gradient ranging from 20px to 120px, and draws a square to display it:<br/>\nmyGraphics.beginLinearGradientFill([\"#000\",\"#FFF\"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);", "guessedname": "beginLinearGradientFill", "guessedtype": "function"}, "_setProp": {"protected": "", "params": [{"type": "String", "name": "name", "description": ""}, {"type": "String", "name": "value", "description": ""}], "description": "used to create Commands that set properties", "guessedname": "_setProp", "guessedtype": "function"}, "beginBitmapStroke": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Image | HTMLCanvasElement | HTMLVideoElement", "name": "image", "description": " The Image, Canvas, or Video object to use as the pattern."}, {"type": "String", "name": "repetition", "description": " Optional. Indicates whether to repeat the image in the fill area. One of \"repeat\", \"repeat-x\",\n\"repeat-y\", or \"no-repeat\". Defaults to \"repeat\"."}], "description": "Begins a pattern fill using the specified image. This ends the current subpath.", "guessedname": "beginBitmapStroke", "guessedtype": "function"}, "draw": {"params": [{"type": "CanvasRenderingContext2D", "name": "ctx", "description": " The canvas 2D context object to draw into."}], "description": "Draws the display object into the specified context ignoring it's visible, alpha, shadow, and transform.\nReturns true if the draw was handled (useful for overriding functionality).\nNOTE: This method is mainly for internal use, though it may be useful for advanced uses.", "guessedname": "draw", "guessedtype": "function"}, "bezierCurveTo": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "cp1x", "description": ""}, {"type": "Number", "name": "cp1y", "description": ""}, {"type": "Number", "name": "cp2x", "description": ""}, {"type": "Number", "name": "cp2y", "description": ""}, {"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}], "description": "Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x, cp2y).  \nFor detailed information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-beziercurveto\">\nwhatwg spec</a>.\nmethod @bezierCurveTo", "guessedname": "bezierCurveTo", "guessedtype": "function"}, "setStrokeStyle": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "", "name": "thickness", "description": " The width of the stroke."}, {"type": "", "name": "caps", "description": " Optional. Indicates the type of caps to use at the end of lines. One of butt, round, or square. Defaults to \"butt\". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with the tiny API."}, {"type": "", "name": "joints", "description": " Optional. Specifies the type of joints that should be used where two lines meet. One of bevel, round, or miter. Defaults to \"miter\". Also accepts the values 0 (miter), 1 (round), and 2 (bevel) for use with the tiny API."}, {"type": "", "name": "miter", "description": " Optional. If joints is set to \"miter\", then you can specify a miter limit ratio which controls at what point a mitered joint will be clipped."}], "description": "Sets the stroke style for the current subpath. Like all drawing methods, this can be chained, so you can define the stroke style and color in a single line of code like so:\nmyGraphics.setStrokeStyle(8,\"round\").beginStroke(\"#F00\");", "guessedname": "setStrokeStyle", "guessedtype": "function"}, "arcTo": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "x1", "description": ""}, {"type": "Number", "name": "y1", "description": ""}, {"type": "Number", "name": "x2", "description": ""}, {"type": "Number", "name": "y2", "description": ""}, {"type": "Number", "name": "radius", "description": ""}], "description": "Draws an arc with the specified control points and radius.  For detailed information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arcto\">\nwhatwg spec</a>.", "guessedname": "arcTo", "guessedtype": "function"}, "clone": {"return": {"type": "Graphics", "description": "A clone of the current Graphics instance."}, "description": "Returns a clone of this Graphics instance.", "guessedname": "clone", "guessedtype": "function"}, "getRGB": {"return": {"type": "", "description": "A CSS compatible color string based on the specified RGB numeric color values in the format \n\"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\"."}, "description": "Returns a CSS compatible color string based on the specified RGB numeric color values in the format \n\"rgba(255,255,255,1.0)\", or if alpha is null then in the format \"rgb(255,255,255)\". For example,\nGraphics.getRGB(50, 100, 150, 0.5) will return \"rgba(50,100,150,0.5)\". It also supports passing a single hex color \nvalue as the first param, and an optional alpha value as the second param. For example, Graphics.getRGB(0xFF00FF, 0.2)\nwill return \"rgba(255,0,255,0.2)\".", "static": "", "guessedname": "getRGB", "guessedtype": "function", "params": [{"type": "Number", "name": "r", "description": " The red component for the color, between 0 and 0xFF (255)."}, {"type": "Number", "name": "g", "description": " The green component for the color, between 0 and 0xFF (255)."}, {"type": "Number", "name": "b", "description": " The blue component for the color, between 0 and 0xFF (255)."}, {"type": "Number", "name": "alpha", "description": " Optional. The alpha component for the color where 0 is fully transparent and 1 is fully opaque."}]}, "drawCircle": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "x", "description": " x coordinate center point of circle."}, {"type": "Number", "name": "y", "description": " y coordinate center point of circle."}, {"type": "Number", "name": "radius", "description": " Radius of circle."}], "description": "Draws a circle with the specified radius at (x, y).", "guessedname": "drawCircle", "guessedtype": "function"}, "initialize": {"protected": "", "params": [{"type": "String", "name": "instructions", "description": ""}], "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "beginRadialGradientStroke": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "", "name": "colors", "description": " An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient drawing from red to blue."}, {"type": "", "name": "ratios", "description": " An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color to 100%."}, {"type": "", "name": "x0", "description": " Center position of the inner circle that defines the gradient."}, {"type": "", "name": "y0", "description": " Center position of the inner circle that defines the gradient."}, {"type": "", "name": "r0", "description": " Radius of the inner circle that defines the gradient."}, {"type": "", "name": "x1", "description": " Center position of the outer circle that defines the gradient."}, {"type": "", "name": "y1", "description": " Center position of the outer circle that defines the gradient."}, {"type": "", "name": "r1", "description": " Radius of the outer circle that defines the gradient."}], "description": "Begins a radial gradient stroke. This ends the current subpath. For example, the following code defines a red to blue radial gradient centered at (100, 100), with a radius of 50, and draws a rectangle to display it:<br/>\nmyGraphics.setStrokeStyle(10).beginRadialGradientStroke([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawRect(50, 90, 150, 110);", "guessedname": "beginRadialGradientStroke", "guessedtype": "function"}, "beginStroke": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "", "name": "color", "description": " A CSS compatible color value (ex. \"#FF0000\" or \"rgba(255,0,0,0.5)\"). Setting to null will result in no stroke."}], "description": "Begins a stroke with the specified color. This ends the current subpath.", "guessedname": "beginStroke", "guessedtype": "function"}, "rect": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}, {"type": "Number", "name": "w", "description": " Width of the rectangle"}, {"type": "Number", "name": "h", "description": " Height of the rectangle"}], "description": "Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke.\nFor detailed information, read the \n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-rect\">\nwhatwg spec</a>.", "guessedname": "rect", "guessedtype": "function"}, "endFill": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "description": "Ends the current subpath, and begins a new one with no fill. Functionally identical to beginFill(null).", "guessedname": "endFill", "guessedtype": "function"}, "drawEllipse": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}, {"type": "Number", "name": "w", "description": ""}, {"type": "Number", "name": "h", "description": ""}], "description": "Draws an ellipse (oval).", "guessedname": "drawEllipse", "guessedtype": "function"}, "clear": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "description": "Clears all drawing instructions, effectively reseting this Graphics instance.", "guessedname": "clear", "guessedtype": "function"}, "_newPath": {"protected": "", "guessedname": "_newPath", "guessedtype": "function"}, "closePath": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "description": "Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified\nsince the fill or stroke was last set.", "guessedname": "closePath", "guessedtype": "function"}, "beginRadialGradientFill": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "params": [{"type": "Array[String]", "name": "colors", "description": " An array of CSS compatible color values. For example, [\"#F00\",\"#00F\"] would define a gradient \ndrawing from red to blue."}, {"type": "Array[Number]", "name": "ratios", "description": " An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would \ndraw the first color to 10% then interpolating to the second color at 90%."}, {"type": "Number", "name": "x0", "description": " Center position of the inner circle that defines the gradient."}, {"type": "Number", "name": "y0", "description": " Center position of the inner circle that defines the gradient."}, {"type": "Number", "name": "r0", "description": " Radius of the inner circle that defines the gradient."}, {"type": "Number", "name": "x1", "description": " Center position of the outer circle that defines the gradient."}, {"type": "Number", "name": "y1", "description": " Center position of the outer circle that defines the gradient."}, {"type": "Number", "name": "r1", "description": " Radius of the outer circle that defines the gradient."}], "description": "Begins a radial gradient fill. This ends the current subpath. For example, the following code defines a red to blue radial \ngradient centered at (100, 100), with a radius of 50, and draws a circle to display it:<br/>\nmyGraphics.beginRadialGradientFill([\"#F00\",\"#00F\"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);", "guessedname": "beginRadialGradientFill", "guessedtype": "function"}, "endStroke": {"return": {"type": "Graphics", "description": "The Graphics instance the method is called on (useful for chaining calls.)"}, "description": "Ends the current subpath, and begins a new one with no stroke. Functionally identical to beginStroke(null).", "guessedname": "endStroke", "guessedtype": "function"}}, "file": "Graphics.js", "guessedtype": "function", "shortname": "Graphics", "properties": {"_dirty": {"default": "false", "protected": "", "type": "Boolean", "guessedname": "_dirty", "guessedtype": "property"}, "_strokeStyleInstructions": {"protected": "", "type": "Array[Command]", "guessedname": "_strokeStyleInstructions", "guessedtype": "property"}, "ef": {"protected": "", "description": "Shortcut to endFill.", "guessedname": "ef", "guessedtype": "property"}, "drawRect": {"type": "Function", "description": "Maps the familiar ActionScript drawRect() method to the functionally similar rect() method.", "guessedname": "drawRect", "guessedtype": "property"}, "_activeInstructions": {"protected": "", "type": "Array[Command]", "guessedname": "_activeInstructions", "guessedtype": "property"}, "_ctx": {"type": "CanvasRenderingContext2D", "protected": "", "static": "", "guessedname": "_ctx", "guessedtype": "property"}, "_instructions": {"protected": "", "type": "Array[Command]", "guessedname": "_instructions", "guessedtype": "property"}, "cp": {"protected": "", "description": "Shortcut to closePath.", "guessedname": "cp", "guessedtype": "property"}, "strokeCmd": {"type": "Command", "protected": "", "static": "", "guessedname": "strokeCmd", "guessedtype": "property"}, "es": {"protected": "", "description": "Shortcut to endStroke.", "guessedname": "es", "guessedtype": "property"}, "lf": {"protected": "", "description": "Shortcut to beginLinearGradientFill.", "guessedname": "lf", "guessedtype": "property"}, "_fillInstructions": {"protected": "", "type": "Array[Command]", "guessedname": "_fillInstructions", "guessedtype": "property"}, "curveTo": {"type": "Function", "description": "Maps the familiar ActionScript curveTo() method to the functionally similar quatraticCurveTo() method.", "guessedname": "curveTo", "guessedtype": "property"}, "rr": {"protected": "", "description": "Shortcut to drawRoundRect.", "guessedname": "rr", "guessedtype": "property"}, "rs": {"protected": "", "description": "Shortcut to beginRadialGradientStroke.", "guessedname": "rs", "guessedtype": "property"}, "rf": {"protected": "", "description": "Shortcut to beginRadialGradientFill.", "guessedname": "rf", "guessedtype": "property"}, "lt": {"protected": "", "description": "Shortcut to lineTo.", "guessedname": "lt", "guessedtype": "property"}, "ls": {"protected": "", "description": "Shortcut to beginLinearGradientStroke.", "guessedname": "ls", "guessedtype": "property"}, "_strokeInstructions": {"protected": "", "type": "Array[Command]", "guessedname": "_strokeInstructions", "guessedtype": "property"}, "STROKE_JOINTS_MAP": {"description": "Maps numeric values for the joints parameter of setStrokeStyle to corresponding string values.\nThis is primarily for use with the tiny API. The mappings are as follows: 0 to \"miter\",\n1 to \"round\", and 2 to \"bevel\".\nFor example, myGraphics.ss(16, 0, 2) would set the line joints to \"bevel\".", "static": "", "guessedname": "STROKE_JOINTS_MAP", "guessedtype": "property", "type": "Array[String]", "final": ""}, "bf": {"protected": "", "description": "Shortcut to beginBitmapFill.", "guessedname": "bf", "guessedtype": "property"}, "de": {"protected": "", "description": "Shortcut to drawEllipse.", "guessedname": "de", "guessedtype": "property"}, "s": {"protected": "", "description": "Shortcut to beginStroke.", "guessedname": "s", "guessedtype": "property"}, "rc": {"protected": "", "description": "Shortcut to drawRoundRectComplex.", "guessedname": "rc", "guessedtype": "property"}, "dc": {"protected": "", "description": "Shortcut to drawCircle.", "guessedname": "dc", "guessedtype": "property"}, "bt": {"protected": "", "description": "Shortcut to bezierCurveTo.", "guessedname": "bt", "guessedtype": "property"}, "_oldInstructions": {"protected": "", "type": "Array[Command]", "guessedname": "_oldInstructions", "guessedtype": "property"}, "bs": {"protected": "", "description": "Shortcut to beginBitmapStroke.", "guessedname": "bs", "guessedtype": "property"}, "STROKE_CAPS_MAP": {"description": "Maps numeric values for the caps parameter of setStrokeStyle to corresponding string values.\nThis is primarily for use with the tiny API. The mappings are as follows: 0 to \"butt\",\n1 to \"round\", and 2 to \"square\".\nFor example, myGraphics.ss(16, 2) would set the line caps to \"square\".", "static": "", "guessedname": "STROKE_CAPS_MAP", "guessedtype": "property", "type": "Array[String]", "final": ""}, "dr": {"protected": "", "description": "Shortcut to drawRect.", "guessedname": "dr", "guessedtype": "property"}, "dp": {"protected": "", "description": "Shortcut to drawPolyStar.", "guessedname": "dp", "guessedtype": "property"}, "a": {"protected": "", "description": "Shortcut to arc.", "guessedname": "a", "guessedtype": "property"}, "beginCmd": {"type": "Command", "protected": "", "static": "", "guessedname": "beginCmd", "guessedtype": "property"}, "c": {"protected": "", "description": "Shortcut to clear.", "guessedname": "c", "guessedtype": "property"}, "qt": {"protected": "", "description": "Shortcut to quadraticCurveTo / curveTo.", "guessedname": "qt", "guessedtype": "property"}, "f": {"protected": "", "description": "Shortcut to beginFill.", "guessedname": "f", "guessedtype": "property"}, "ss": {"protected": "", "description": "Shortcut to setStrokeStyle.", "guessedname": "ss", "guessedtype": "property"}, "_active": {"default": "false", "protected": "", "type": "Boolean", "guessedname": "_active", "guessedtype": "property"}, "mt": {"protected": "", "description": "Shortcut to moveTo.", "guessedname": "mt", "guessedtype": "property"}, "fillCmd": {"type": "Command", "protected": "", "static": "", "guessedname": "fillCmd", "guessedtype": "property"}, "r": {"protected": "", "description": "Shortcut to rect.", "guessedname": "r", "guessedtype": "property"}, "at": {"protected": "", "description": "Shortcut to arcTo.", "guessedname": "at", "guessedtype": "property"}}, "description": "The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a specified context.\nNote that you can use Graphics without any dependency on the Easel framework by calling draw() directly,\nor it can be used with the Shape object to draw vector graphics within the context of an Easel display list.<br/><br/>\nNote that all drawing methods in Graphics return the Graphics instance, so they can be chained together. For example, the following \nline of code would generate the instructions to draw a rectangle with a red stroke and blue fill, then render it to the specified \ncontext2D:<br/>\nmyGraphics.beginStroke(\"#F00\").beginFill(\"#00F\").drawRect(20, 20, 100, 50).draw(myContext2D);"}, "Shadow": {"name": "Shadow", "constructors": [{"params": [{"type": "String", "name": "color", "description": " The color of the shadow."}, {"type": "Number", "name": "offsetX", "description": " The x offset of the shadow."}, {"type": "Number", "name": "offsetY", "description": " The y offset of the shadow."}, {"type": "Number", "name": "blur", "description": " The size of the blurring effect."}], "description": "Encapsulates the properties required to define a shadow to apply to a DisplayObject via it's .shadow property."}], "namespace": "", "module": "EaselJS", "guessedname": "Shadow", "methods": {"initialize": {"protected": "", "params": [{"type": "Array[Command]", "name": "instructions", "description": ""}], "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "clone": {"return": {"type": "Shadow", "description": "A clone of the current Shadow instance."}, "description": "Returns a clone of this Shadow instance.", "guessedname": "clone", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}}, "file": "Shadow.js", "guessedtype": "function", "shortname": "Shadow", "properties": {"color": {"default": "null", "type": "String", "description": "The color of the shadow.\nproperty color", "guessedname": "color", "guessedtype": "property"}, "offsetX": {"default": "0", "type": "Number", "description": "The x offset of the shadow.\nproperty offsetX", "guessedname": "offsetX", "guessedtype": "property"}, "offsetY": {"default": "0", "type": "Number", "description": "The y offset of the shadow.\nproperty offsetY", "guessedname": "offsetY", "guessedtype": "property"}, "identity": {"description": "An identity shadow object (all properties are set to 0). Read-only.", "static": "", "guessedname": "identity", "guessedtype": "property", "type": "Shadow", "final": ""}, "blur": {"default": "0", "type": "Number", "description": "The blur of the shadow.\nproperty blur", "guessedname": "blur", "guessedtype": "property"}}, "description": "Encapsulates the properties required to define a shadow to apply to a DisplayObject via it's .shadow property."}, "Stage": {"name": "Stage", "constructors": [{"params": [{"type": "HTMLCanvasElement", "name": "canvas", "description": " The canvas the stage will render to."}], "description": "A stage is the root level Container for a display list. Each time its tick method is called, it will render its display\nlist to its target canvas."}], "namespace": "", "module": "EaselJS", "events": {"tick\nBroadcast to children when the stage is updated.": {}, "onMouseMove": {"params": [{"type": "MouseEvent", "name": "event", "description": " A MouseEvent instance with information about the current mouse event."}], "description": "The onMouseMove callback is called when the user moves the mouse over the canvas.  The handler is passed a single param\ncontaining the corresponding MouseEvent instance.", "guessedname": "onMouseMove", "guessedtype": "property"}, "onMouseUp": {"params": [{"type": "MouseEvent", "name": "event", "description": " A MouseEvent instance with information about the current mouse event."}], "description": "The onMouseUp callback is called when the user releases the mouse button anywhere that the page can detect it.  The handler \nis passed a single param containing the corresponding MouseEvent instance.", "guessedname": "onMouseUp", "guessedtype": "property"}, "onMouseDown": {"params": [{"type": "MouseEvent", "name": "event", "description": " A MouseEvent instance with information about the current mouse event."}], "description": "The onMouseDown callback is called when the user presses the mouse button over the canvas.  The handler is passed a single \nparam containing the corresponding MouseEvent instance.", "guessedname": "onMouseDown", "guessedtype": "property"}}, "guessedname": "Stage", "methods": {"_updateMousePosition": {"protected": "", "params": [{"type": "Number", "name": "pageX", "description": ""}, {"type": "Number", "name": "pageY", "description": ""}], "guessedname": "_updateMousePosition", "guessedtype": "function"}, "_handleMouseDown": {"protected": "", "params": [{"type": "MouseEvent", "name": "e", "description": ""}], "guessedname": "_handleMouseDown", "guessedtype": "function"}, "_testMouseOver": {"protected": "", "guessedname": "_testMouseOver", "guessedtype": "function"}, "_handleMouseMove": {"protected": "", "params": [{"type": "MouseEvent", "name": "e", "description": ""}], "guessedname": "_handleMouseMove", "guessedtype": "function"}, "clone": {"return": {"type": "Stage", "description": "A clone of the current Container instance."}, "description": "Returns a clone of this Stage.", "guessedname": "clone", "guessedtype": "function"}, "toDataURL": {"return": {"type": "String", "description": "a Base64 encoded image."}, "params": [{"type": "String", "name": "backgroundColor", "description": " The background color to be used for the generated image. The value can be any value HTML color\nvalue, including HEX colors, rgb and rgba. The default value is a transparent background."}, {"type": "String", "name": "mimeType", "description": " The MIME type of the image format to be create. The default is \"image/png\". If an unknown MIME type\nis passed in, or if the browser does not support the specified MIME type, the default value will be used."}], "description": "Returns a data url that contains a Base64 encoded image of the contents of the stage. The returned data url can be \nspecified as the src value of an image element.", "guessedname": "toDataURL", "guessedtype": "function"}, "update": {"description": "Each time the update method is called, the stage will tick any descendants exposing a tick method (ex. BitmapSequence) \nand render its entire display list to the canvas.", "guessedname": "update", "guessedtype": "function"}, "initialize\nparam {HTMLCanvasElement} canvas": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}, "enableMouseOver": {"params": [{"type": "Number", "name": "frequency", "description": " The maximum number of times per second to broadcast mouse over/out events. Set to 0 to disable mouse\nover events completely. Maximum is 50. A lower frequency is less responsive, but uses less CPU."}], "description": "Enables or disables (by passing a frequency of 0) mouse over handlers (onMouseOver and onMouseOut) for this stage's display\nlist. These events can be expensive to generate, so they are disabled by default, and the frequency of the events\ncan be controlled independently of mouse move events via the frequency parameter.", "guessedname": "enableMouseOver", "guessedtype": "function"}, "clear": {"description": "Clears the target canvas. Useful if autoClear is set to false.", "guessedname": "clear", "guessedtype": "function"}, "_handleMouseUp": {"protected": "", "params": [{"type": "MouseEvent", "name": "e", "description": ""}], "guessedname": "_handleMouseUp", "guessedtype": "function"}}, "extends": "Container", "superclass": "Container", "file": "Stage.js", "guessedtype": "function", "shortname": "Stage", "properties": {"canvas": {"type": "HTMLCanvasElement", "description": "The canvas the stage will render to. Multiple stages can share a single canvas, but you must disable autoClear for all but the\nfirst stage that will be ticked (or they will clear each other's render).", "guessedname": "canvas", "guessedtype": "property"}, "_activeMouseTarget": {"protected": "", "type": "DisplayObject", "guessedname": "_activeMouseTarget", "guessedtype": "property"}, "_snapToPixelEnabled": {"default": "false", "protected": "", "type": "Boolean", "guessedname": "_snapToPixelEnabled", "guessedtype": "property"}, "_mouseOverTarget": {"protected": "", "type": "DisplayObject", "guessedname": "_mouseOverTarget", "guessedtype": "property"}, "_mouseOverIntervalID": {"protected": "", "type": "Number", "guessedname": "_mouseOverIntervalID", "guessedtype": "property"}, "_activeMouseEvent": {"protected": "", "type": "MouseEvent", "guessedname": "_activeMouseEvent", "guessedtype": "property"}, "DisplayObject_initialize": {"type": "Function", "private": "", "guessedname": "Container_initialize", "guessedtype": "property"}, "autoClear": {"default": "true", "type": "Boolean", "description": "Indicates whether the stage should automatically clear the canvas before each render. You can set this to false to manually\ncontrol clearing (for generative art, or when pointing multiple stages at the same canvas for example).", "guessedname": "autoClear", "guessedtype": "property"}, "tick": {"guessedname": "tick", "type": "Function", "description": "Calls the update method. Useful for adding stage as a listener to Ticker directly.", "private": "", "guessedtype": "property"}, "mouseY": {"final": "", "type": "Number", "description": "READ-ONLY. The current mouse Y position on the canvas. If the mouse leaves the canvas, this will indicate the most recent \nposition over the canvas, and mouseInBounds will be set to false.", "guessedname": "mouseY", "guessedtype": "property"}, "mouseX": {"final": "", "type": "Number", "description": "READ-ONLY. The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent \nposition over the canvas, and mouseInBounds will be set to false.", "guessedname": "mouseX", "guessedtype": "property"}, "_tmpCanvas": {"protected": "", "type": "HTMLCanvasElement", "guessedname": "_tmpCanvas", "guessedtype": "property"}, "mouseInBounds": {"default": "false", "type": "Boolean", "description": "Indicates whether the mouse is currently within the bounds of the canvas.", "guessedname": "mouseInBounds", "guessedtype": "property"}, "_mouseOverY": {"protected": "", "type": "Number", "guessedname": "_mouseOverY", "guessedtype": "property"}, "_mouseOverX": {"protected": "", "type": "Number", "guessedname": "_mouseOverX", "guessedtype": "property"}, "snapToPixelEnabled": {"default": "false", "type": "Boolean", "description": "Indicates whether this stage should use the snapToPixel property of display objects when rendering them.", "guessedname": "snapToPixelEnabled", "guessedtype": "property"}}, "description": "A stage is the root level Container for a display list. Each time its tick method is called, it will render its display\nlist to its target canvas."}, "Ticker": {"name": "Ticker", "namespace": "", "module": "EaselJS", "properties": {"_pausedTickers": {"protected": "", "type": "Number", "description": "Number of ticks that have passed while Ticker has been paused", "guessedname": "_pausedTickers", "guessedtype": "property"}, "_intervalID": {"protected": "", "type": "Number", "guessedname": "_intervalID", "guessedtype": "property"}, "_paused": {"protected": "", "type": "Boolean", "guessedname": "_paused", "guessedtype": "property"}, "_startTime": {"protected": "", "type": "Number", "guessedname": "_startTime", "guessedtype": "property"}, "_ticks": {"protected": "", "type": "Number", "description": "Number of ticks that have passed", "guessedname": "_ticks", "guessedtype": "property"}, "_listeners": {"protected": "", "type": "Array[Object]", "guessedname": "_listeners", "guessedtype": "property"}, "_lastTime": {"protected": "", "type": "Number", "guessedname": "_lastTime", "guessedtype": "property"}, "_pausedTime": {"protected": "", "type": "Number", "guessedname": "_pausedTime", "guessedtype": "property"}, "_times": {"protected": "", "type": "Array[Number]", "guessedname": "_times", "guessedtype": "property"}, "_interval": {"protected": "", "type": "Number", "guessedname": "_interval", "guessedtype": "property"}, "_inited": {"protected": "", "type": "Boolean", "guessedname": "_inited", "guessedtype": "property"}, "_pauseable": {"protected": "", "type": "Array[Boolean]", "guessedname": "_pauseable", "guessedtype": "property"}}, "guessedname": "Ticker", "methods": {"addListener": {"static": "", "params": [{"type": "Object", "name": "o", "description": " The object to add as a listener."}, {"type": "Boolean", "name": "pauseable", "description": " If false, the listener will continue to have tick called \neven when Ticker is paused via Ticker.pause(). Default is true."}], "description": "Adds a listener for the tick event. The listener object must expose a .tick() method, \nwhich will be called once each tick / interval. The interval is specified via the \n.setInterval(ms) method.\nThe exposed tick method is passed a single parameter, which include the elapsed time between the \nprevious tick and the current one.", "guessedname": "addListener", "guessedtype": "function"}, "getPaused": {"static": "", "return": {"type": "Boolean", "description": "Whether the Ticker is currently paused."}, "description": "Returns a boolean indicating whether Ticker is currently paused, as set with setPaused.", "guessedname": "getPaused", "guessedtype": "function"}, "getInterval": {"static": "", "return": {"type": "Number", "description": "The current target interval in milliseconds between tick events."}, "description": "Returns the current target time between ticks, as set with setInterval.", "guessedname": "getInterval", "guessedtype": "function"}, "_tick": {"protected": "", "guessedname": "_tick", "guessedtype": "function"}, "setInterval": {"static": "", "params": [{"type": "Number", "name": "interval", "description": " Time in milliseconds between ticks. Default value is 50."}], "description": "Sets the target time (in milliseconds) between ticks. Default is 50 (20 FPS).\nNote actual time between ticks may be more than requested depending on CPU load.", "guessedname": "setInterval", "guessedtype": "function"}, "getMeasuredFPS": {"return": {"type": "Number", "description": "The actual frames / ticks per second. Depending on performance, this may differ\nfrom the target frames per second."}, "description": "Returns the actual frames / ticks per second.", "static": "", "guessedname": "getMeasuredFPS", "guessedtype": "function", "params": [{"type": "Number", "name": "ticks", "description": " Optional. The number of previous ticks over which to measure the actual \nframes / ticks per second."}]}, "removeAllListeners": {"static": "", "description": "Removes all listeners.", "guessedname": "removeAllListeners", "guessedtype": "function"}, "getTime": {"return": {"type": "Number", "description": "Number of milliseconds that have elapsed since Ticker was begun."}, "description": "Returns the number of milliseconds that have elapsed since the first tick event listener was added to\nTicker. For example, you could use this in a time synchronized animation to determine the exact amount of \ntime that has elapsed.", "static": "", "guessedname": "getTime", "guessedtype": "function", "params": [{"type": "Boolean", "name": "pauseable", "description": " Indicates whether to include time elapsed\nwhile Ticker was paused. If false only time elapsed while Ticker is not paused will be returned.\nIf true, the value returned will be total time elapsed since the first tick event listener was added."}]}, "_getTime": {"protected": "", "guessedname": "_getTime", "guessedtype": "function"}, "setFPS": {"static": "", "params": [{"type": "Number", "name": "value", "description": " Target number of ticks broadcast per second."}], "description": "Sets the target frame rate in frames per second (FPS). For example, with an interval of 40, getFPS() will \nreturn 25 (1000ms per second divided by 40 ms per tick = 25fps).", "guessedname": "setFPS", "guessedtype": "function"}, "getTicks": {"return": {"type": "Number", "description": "of ticks that have been broadcast."}, "description": "Returns the number of ticks that have been broadcast by Ticker.", "static": "", "guessedname": "getTicks", "guessedtype": "function", "params": [{"type": "Boolean", "name": "pauseable", "description": " Indicates whether to include ticks that would have been broadcast\nwhile Ticker was paused. If false only tick events broadcast while Ticker is not paused will be returned.\nIf true, tick events that would have been broadcast while Ticker was paused will be included in the return\nvalue. The default value is false."}]}, "setPaused": {"static": "", "params": [{"type": "Boolean", "name": "value", "description": " Indicates whether to pause (true) or unpause (false) Ticker."}], "description": "While Ticker is paused, pausable listeners are not ticked. See addListener for more information.", "guessedname": "setPaused", "guessedtype": "function"}, "removeListener": {"static": "", "params": [{"type": "Object", "name": "o", "description": " The object to remove from listening from the tick event."}], "description": "Removes the specified listener.", "guessedname": "removeListener", "guessedtype": "function"}, "getFPS": {"static": "", "return": {"type": "Number", "description": "The current target number of frames / ticks broadcast per second."}, "description": "Returns the target frame rate in frames per second (FPS). For example, with an \ninterval of 40, getFPS() will return 25 (1000ms per second divided by 40 ms per tick = 25fps).", "guessedname": "getFPS", "guessedtype": "function"}}, "static": "", "file": "Ticker.js", "guessedtype": "function", "shortname": "Ticker", "events": {"tick": {"params": [{"type": "Number", "name": "timeElapsed", "description": " The time elapsed in milliseconds since the last tick event."}], "description": "Event broadcast  once each tick / interval. The interval is specified via the \n.setInterval(ms) or setFPS methods."}}, "description": "The Ticker class uses a static interface (ex. Ticker.getPaused()) and should not be instantiated.\nProvides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe \nto the tick event to be notified when a set time interval has elapsed.\nNote that the interval that the tick event is called is a target interval, and may be broadcast \nat a slower interval during times of high CPU load."}, "Matrix2D": {"name": "Matrix2D", "constructors": [{"params": [{"type": "Number", "name": "a", "description": " Specifies the a property for the new matrix."}, {"type": "Number", "name": "b", "description": " Specifies the b property for the new matrix."}, {"type": "Number", "name": "c", "description": " Specifies the c property for the new matrix."}, {"type": "Number", "name": "d", "description": " Specifies the d property for the new matrix."}, {"type": "Number", "name": "tx", "description": " Specifies the tx property for the new matrix."}, {"type": "Number", "name": "ty", "description": " Specifies the ty property for the new matrix."}], "description": "Represents an affine transformation matrix, and provides tools for constructing and concatenating matrixes."}], "namespace": "", "module": "EaselJS", "guessedname": "Matrix2D", "methods": {"identity": {"description": "Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).", "guessedname": "identity", "guessedtype": "function"}, "rotate": {"params": [{"type": "Number", "name": "angle", "description": " The angle in degrees."}], "description": "Applies a rotation transformation to the matrix.", "guessedname": "rotate", "guessedtype": "function"}, "decompose": {"params": [{"type": "Object", "name": "target", "description": " The object to apply the transform properties to. If null, then a new object will be returned."}], "description": "Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that this these values\nmay not match the transform properties you used to generate the matrix, though they will produce the same visual\nresults.", "guessedname": "decompose", "guessedtype": "function"}, "appendMatrix": {"params": [{"type": "Matrix2D", "name": "matrix", "description": ""}], "description": "Appends the specified matrix with this matrix.", "guessedname": "appendMatrix", "guessedtype": "function"}, "clone": {"return": {"type": "Matrix2D", "description": "a clone of the Matrix2D instance."}, "description": "Returns a clone of the Matrix2D instance.", "guessedname": "clone", "guessedtype": "function"}, "skew": {"params": [{"type": "Number", "name": "skewX", "description": " The amount to skew horizontally in degrees."}, {"type": "Number", "name": "skewY", "description": " The amount to skew vertically in degrees."}], "description": "Applies a skew transformation to the matrix.", "guessedname": "skew", "guessedtype": "function"}, "prependProperties": {"params": [{"type": "Number", "name": "alpha", "description": " desired alpha value"}, {"type": "Shadow", "name": "shadow", "description": " desired shadow value"}, {"type": "String", "name": "compositeOperation", "description": " desired composite operation value"}], "description": "Prepends the specified visual properties to the current matrix.", "guessedname": "prependProperties", "guessedtype": "function"}, "prepend": {"params": [{"type": "Number", "name": "a", "description": ""}, {"type": "Number", "name": "b", "description": ""}, {"type": "Number", "name": "c", "description": ""}, {"type": "Number", "name": "d", "description": ""}, {"type": "Number", "name": "tx", "description": ""}, {"type": "Number", "name": "ty", "description": ""}], "description": "Concatenates the specified matrix properties with this matrix. All parameters are required.", "guessedname": "prepend", "guessedtype": "function"}, "appendTransform": {"params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}, {"type": "Number", "name": "scaleX", "description": ""}, {"type": "Number", "name": "scaleY", "description": ""}, {"type": "Number", "name": "rotation", "description": ""}, {"type": "Number", "name": "skewX", "description": ""}, {"type": "Number", "name": "skewY", "description": ""}, {"type": "Number", "name": "regX", "description": " Optional."}, {"type": "Number", "name": "regY", "description": " Optional."}], "description": "Generates matrix properties from the specified display object transform properties, and appends them with this matrix.\nFor example, you can use this to generate a matrix from a display object: var mtx = new Matrix2D(); \nmtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);", "guessedname": "appendTransform", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}, "scale": {"params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}], "description": "Applies a scale transformation to the matrix.", "guessedname": "scale", "guessedtype": "function"}, "prependMatrix": {"params": [{"type": "Matrix2D", "name": "matrix", "description": ""}], "description": "Prepends the specified matrix with this matrix.", "guessedname": "prependMatrix", "guessedtype": "function"}, "initialize": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "translate": {"params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}], "description": "Translates the matrix on the x and y axes.", "guessedname": "translate", "guessedtype": "function"}, "prependTransform": {"params": [{"type": "Number", "name": "x", "description": ""}, {"type": "Number", "name": "y", "description": ""}, {"type": "Number", "name": "scaleX", "description": ""}, {"type": "Number", "name": "scaleY", "description": ""}, {"type": "Number", "name": "rotation", "description": ""}, {"type": "Number", "name": "skewX", "description": ""}, {"type": "Number", "name": "skewY", "description": ""}, {"type": "Number", "name": "regX", "description": " Optional."}, {"type": "Number", "name": "regY", "description": " Optional."}], "description": "Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.\nFor example, you can use this to generate a matrix from a display object: var mtx = new Matrix2D(); \nmtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);", "guessedname": "prependTransform", "guessedtype": "function"}, "invert": {"description": "Inverts the matrix, causing it to perform the opposite transformation.", "guessedname": "invert", "guessedtype": "function"}, "append": {"params": [{"type": "Number", "name": "a", "description": ""}, {"type": "Number", "name": "b", "description": ""}, {"type": "Number", "name": "c", "description": ""}, {"type": "Number", "name": "d", "description": ""}, {"type": "Number", "name": "tx", "description": ""}, {"type": "Number", "name": "ty", "description": ""}], "description": "Appends the specified matrix properties with this matrix. All parameters are required.", "guessedname": "append", "guessedtype": "function"}, "appendProperties": {"params": [{"type": "Number", "name": "alpha", "description": " desired alpha value"}, {"type": "Shadow", "name": "shadow", "description": " desired shadow value"}, {"type": "String", "name": "compositeOperation", "description": " desired composite operation value"}], "description": "Appends the specified visual properties to the current matrix.", "guessedname": "appendProperties", "guessedtype": "function"}}, "file": "Matrix2D.js", "guessedtype": "function", "shortname": "Matrix2D", "properties": {"a": {"type": "Number", "description": "Position (0, 0) in a 3x3 affine transformation matrix.", "guessedname": "a", "guessedtype": "property"}, "c": {"type": "Number", "description": "Position (1, 0) in a 3x3 affine transformation matrix.", "guessedname": "c", "guessedtype": "property"}, "b": {"type": "Number", "description": "Position (0, 1) in a 3x3 affine transformation matrix.", "guessedname": "b", "guessedtype": "property"}, "d": {"type": "Number", "description": "Position (1, 1) in a 3x3 affine transformation matrix.", "guessedname": "d", "guessedtype": "property"}, "ty": {"type": "Number", "description": "Position (2, 1) in a 3x3 affine transformation matrix.", "guessedname": "ty", "guessedtype": "property"}, "compositeOperation": {"type": "String", "description": "Property representing the compositeOperation that will be applied to a display object. This is not part of\nmatrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated \ncompositeOperation values. You can find a list of valid composite operations at:\n<a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>", "guessedname": "compositeOperation", "guessedtype": "property"}, "atx": {"type": "Number", "description": "Position (2, 0) in a 3x3 affine transformation matrix.", "guessedname": "tx", "guessedtype": "property"}, "alpha": {"type": "Number", "description": "Property representing the alpha that will be applied to a display object. This is not part of matrix \noperations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.", "guessedname": "alpha", "guessedtype": "property"}, "DEG_TO_RAD": {"description": "Multiplier for converting degrees to radians. Used internally by Matrix2D. Read-only.", "static": "", "guessedname": "DEG_TO_RAD", "guessedtype": "property", "type": "Number", "final": ""}, "shadow": {"type": "Shadow", "description": "Property representing the shadow that will be applied to a display object. This is not part of matrix\noperations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values.", "guessedname": "shadow", "guessedtype": "property"}, "identity": {"type": "Matrix2D", "static": "", "description": "An identity matrix, representing a null transformation. Read-only.", "guessedname": "identity", "guessedtype": "property"}}, "description": "Represents an affine transformation matrix, and provides tools for constructing and concatenating matrixes."}, "Rectangle": {"name": "Rectangle", "constructors": [{"params": [{"type": "Number", "name": "x", "description": " X position. Default is 0."}, {"type": "Number", "name": "y", "description": " Y position. Default is 0."}, {"type": "Number", "name": "width", "description": " Width. Default is 0."}, {"type": "Number", "name": "height", "description": " Height. Default is 0."}], "description": "Represents a rectangle as defined by the points (x, y) and (x+width, y+height)."}], "namespace": "", "module": "EaselJS", "guessedname": "Rectangle", "methods": {"initialize": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}, "clone": {"return": {"type": "Rectangle", "description": "a clone of the Rectangle instance."}, "description": "Returns a clone of the Rectangle instance.", "guessedname": "clone", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}}, "file": "Rectangle.js", "guessedtype": "function", "shortname": "Rectangle", "properties": {"y": {"type": "Number", "description": "Y position.", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Number", "description": "X position.", "guessedname": "x", "guessedtype": "property"}, "height": {"type": "Number", "description": "Height.", "guessedname": "height", "guessedtype": "property"}, "width": {"type": "Number", "description": "Width.", "guessedname": "width", "guessedtype": "property"}}, "description": "Represents a rectangle as defined by the points (x, y) and (x+width, y+height)."}, "SpriteSheet": {"name": "SpriteSheet", "constructors": [{"params": [{"type": "Image | HTMLCanvasElement | HTMLVideoElement", "name": "image", "description": " The Image, Canvas, or Video instance to use as a sprite sheet."}, {"type": "Number", "name": "frameWidth", "description": " The width in pixels of each frame on the sprite sheet."}, {"type": "Number", "name": "frameHeight", "description": " The height in pixels of each frame on the sprite sheet."}, {"type": "Object", "name": "frameData", "description": " Defines named frames and frame sequences. See the frameData property for more information."}], "description": "Encapsulates the properties associated with a sprite sheet. A sprite sheet is a series of images (usually animation frames) combined\ninto a single image on a regular grid. For example, an animation consisting of 8 100x100 images could be combined into a 400x200 \nsprite sheet (4 frames across by 2 high).\nThe simplest form of sprite sheet has values for the image, frameWidth, and frameHeight properties, but does not include frameData. \nIt will then play all of the frames in the animation and loop if the loop property is true. In this simple mode, you can also set \nthe totalFrames property if you have extraneous frames in your sprite sheet (for example, a 2x4 frame sprite sheet, with only 7 \nframes used).<br/><br/>\nMore complex sprite sheets include a frameData property, which provides named frames and animations which can be played and sequenced \ntogether. See frameData for more information."}], "namespace": "", "module": "EaselJS", "guessedname": "SpriteSheet", "methods": {"clone": {"return": {"type": "SpriteSheet", "description": "a clone of the SpriteSheet instance."}, "description": "Returns a clone of the SpriteSheet instance.", "guessedname": "clone", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "a string representation of the instance."}, "description": "Returns a string representation of this object.", "guessedname": "toString", "guessedtype": "function"}, "initialize\nparam {Graphics} graphics": {"protected": "", "description": "Initialization method.", "guessedname": "initialize", "guessedtype": "function"}}, "file": "SpriteSheet.js", "guessedtype": "function", "shortname": "SpriteSheet", "properties": {"frameData": {"type": "Object", "description": "Defines named frames and frame sequences. Frame data is specified as a generic object, where each property name will \nbe used to define a new named frame or sequence. Named frames specify a frame number. Sequences are defined using an \narray of 2 or 3 values: the start frame, the end frame, and optionally the name of the next sequence to play.<br/><br/>\nFor example, examine the following frame data:<br/>{walk:[0,20], shoot:[21,25,\"walk\"], crouch:[26,30,false], stand:31}<br/>\nThis will create 3 sequences and a named frame. The first sequence will be named \"walk\", and will loop frames 0 to 20 inclusive.\nThe second sequence will be named \"shoot\", and will play frames 21 to 25 then play the walk sequence. The third sequence \"crouch\" \nwill play frames 26 to 30 then pause on frame 30, due to false being passed as the next sequence. The named frame \"stand\" will \ndisplay frame 31.", "guessedname": "frameData", "guessedtype": "property"}, "image": {"type": "Image | HTMLCanvasElement | HTMLVideoElement", "description": "The Image, Canvas, or Video instance to use as a sprite sheet.", "guessedname": "image", "guessedtype": "property"}, "totalFrames": {"type": "Number", "description": "Specifies the total number of frames in the sprite sheet if no frameData is specified. This is useful for excluding extraneous \nframes (for example, if you have 7 frames in a 2x4 sprite sheet). The total frames will be automatically calculated by \nBitmapSequence based on frame and image dimensions if totalFrames is 0.", "guessedname": "totalFrames", "guessedtype": "property"}, "frameHeight": {"type": "Number", "description": "The height in pixels of each frame on the sprite sheet image.", "guessedname": "frameHeight", "guessedtype": "property"}, "frameWidth": {"type": "Number", "description": "The width in pixels of each frame on the sprite sheet image.", "guessedname": "frameWidth", "guessedtype": "property"}, "loop": {"type": "Boolean", "description": "The loop property is only used if no frameData is specified, and indicates whether all frames (as specified with totalFrames) \nshould loop. If false, the animation will play to totalFrames, then pause.", "guessedname": "loop", "guessedtype": "property"}}, "description": "Encapsulates the properties associated with a sprite sheet. A sprite sheet is a series of images (usually animation frames) combined\ninto a single image on a regular grid. For example, an animation consisting of 8 100x100 images could be combined into a 400x200 \nsprite sheet (4 frames across by 2 high).\nThe simplest form of sprite sheet has values for the image, frameWidth, and frameHeight properties, but does not include frameData. \nIt will then play all of the frames in the animation and loop if the loop property is true. In this simple mode, you can also set \nthe totalFrames property if you have extraneous frames in your sprite sheet (for example, a 2x4 frame sprite sheet, with only 7 \nframes used).<br/><br/>\nMore complex sprite sheets include a frameData property, which provides named frames and animations which can be played and sequenced \ntogether. See frameData for more information."}}, "version": "0.3.2", "modules": {"EaselJS": {"description": "The Easel Javascript library provides a retained graphics mode for canvas \nincluding a full, hierarchical display list, a core interaction model, and \nhelper classes to make working with Canvas much easier.", "submodules": [], "classlist": ["Bitmap", "BitmapSequence", "Container", "DisplayObject", "Command", "Graphics", "Shadow", "Shape", "SpriteSheet", "Stage", "Text", "MouseEvent", "Matrix2D", "Point", "Rectangle", "SpriteSheetUtils", "Ticker", "UID"], "filelist": ["Bitmap.js", "BitmapSequence.js", "Container.js", "DisplayObject.js", "Graphics.js", "Shadow.js", "Shape.js", "SpriteSheet.js", "Stage.js", "Text.js", "MouseEvent.js", "Matrix2D.js", "Point.js", "Rectangle.js", "SpriteSheetUtils.js", "Ticker.js", "UID.js"], "subdata": {}, "name": "EaselJS"}}, "filemap": {"Graphics.js": {"classlist": ["Command", "Graphics"], "name": "Graphics.js", "module": "EaselJS"}, "MouseEvent.js": {"classlist": ["MouseEvent"], "name": "MouseEvent.js", "module": "EaselJS"}, "Ticker.js": {"classlist": ["Ticker"], "name": "Ticker.js", "module": "EaselJS"}, "Bitmap.js": {"classlist": ["Bitmap"], "name": "Bitmap.js", "module": "EaselJS"}, "Text.js": {"classlist": ["Text"], "name": "Text.js", "module": "EaselJS"}, "SpriteSheet.js": {"classlist": ["SpriteSheet"], "name": "SpriteSheet.js", "module": "EaselJS"}, "Container.js": {"classlist": ["Container"], "name": "Container.js", "module": "EaselJS"}, "Point.js": {"classlist": ["Point"], "name": "Point.js", "module": "EaselJS"}, "SpriteSheetUtils.js": {"classlist": ["SpriteSheetUtils"], "name": "SpriteSheetUtils.js", "module": "EaselJS"}, "BitmapSequence.js": {"classlist": ["BitmapSequence"], "name": "BitmapSequence.js", "module": "EaselJS"}, "Matrix2D.js": {"classlist": ["Matrix2D"], "name": "Matrix2D.js", "module": "EaselJS"}, "Shadow.js": {"classlist": ["Shadow"], "name": "Shadow.js", "module": "EaselJS"}, "DisplayObject.js": {"classlist": ["DisplayObject"], "name": "DisplayObject.js", "module": "EaselJS"}, "UID.js": {"classlist": ["UID"], "name": "UID.js", "module": "EaselJS"}, "Shape.js": {"classlist": ["Shape"], "name": "Shape.js", "module": "EaselJS"}, "Rectangle.js": {"classlist": ["Rectangle"], "name": "Rectangle.js", "module": "EaselJS"}, "Stage.js": {"classlist": ["Stage"], "name": "Stage.js", "module": "EaselJS"}}}